// Code generated by MockGen. DO NOT EDIT.
// Source: connection.go

// Package mock is a generated GoMock package.
package mock

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConnenction is a mock of Connenction interface.
type MockConnenction struct {
	ctrl     *gomock.Controller
	recorder *MockConnenctionMockRecorder
}

// MockConnenctionMockRecorder is the mock recorder for MockConnenction.
type MockConnenctionMockRecorder struct {
	mock *MockConnenction
}

// NewMockConnenction creates a new mock instance.
func NewMockConnenction(ctrl *gomock.Controller) *MockConnenction {
	mock := &MockConnenction{ctrl: ctrl}
	mock.recorder = &MockConnenctionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnenction) EXPECT() *MockConnenctionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnenction) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnenctionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnenction)(nil).Close))
}

// ReadFromUDP mocks base method.
func (m *MockConnenction) ReadFromUDP(arg0 []byte) (int, *net.UDPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUDP", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*net.UDPAddr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFromUDP indicates an expected call of ReadFromUDP.
func (mr *MockConnenctionMockRecorder) ReadFromUDP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUDP", reflect.TypeOf((*MockConnenction)(nil).ReadFromUDP), arg0)
}

// WriteToUDP mocks base method.
func (m *MockConnenction) WriteToUDP(arg0 []byte, arg1 *net.UDPAddr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToUDP", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteToUDP indicates an expected call of WriteToUDP.
func (mr *MockConnenctionMockRecorder) WriteToUDP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToUDP", reflect.TypeOf((*MockConnenction)(nil).WriteToUDP), arg0, arg1)
}
