// Code generated by MockGen. DO NOT EDIT.
// Source: connection.go
//
// Generated by this command:
//
//	mockgen -source=connection.go -destination=./internal/mock/connection.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConnectionReader is a mock of ConnectionReader interface.
type MockConnectionReader struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionReaderMockRecorder
	isgomock struct{}
}

// MockConnectionReaderMockRecorder is the mock recorder for MockConnectionReader.
type MockConnectionReaderMockRecorder struct {
	mock *MockConnectionReader
}

// NewMockConnectionReader creates a new mock instance.
func NewMockConnectionReader(ctrl *gomock.Controller) *MockConnectionReader {
	mock := &MockConnectionReader{ctrl: ctrl}
	mock.recorder = &MockConnectionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionReader) EXPECT() *MockConnectionReaderMockRecorder {
	return m.recorder
}

// ReadFromUDP mocks base method.
func (m *MockConnectionReader) ReadFromUDP(data []byte) (int, *net.UDPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUDP", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*net.UDPAddr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFromUDP indicates an expected call of ReadFromUDP.
func (mr *MockConnectionReaderMockRecorder) ReadFromUDP(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUDP", reflect.TypeOf((*MockConnectionReader)(nil).ReadFromUDP), data)
}

// MockConnectionWriter is a mock of ConnectionWriter interface.
type MockConnectionWriter struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionWriterMockRecorder
	isgomock struct{}
}

// MockConnectionWriterMockRecorder is the mock recorder for MockConnectionWriter.
type MockConnectionWriterMockRecorder struct {
	mock *MockConnectionWriter
}

// NewMockConnectionWriter creates a new mock instance.
func NewMockConnectionWriter(ctrl *gomock.Controller) *MockConnectionWriter {
	mock := &MockConnectionWriter{ctrl: ctrl}
	mock.recorder = &MockConnectionWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionWriter) EXPECT() *MockConnectionWriterMockRecorder {
	return m.recorder
}

// WriteToUDP mocks base method.
func (m *MockConnectionWriter) WriteToUDP(data []byte, addr *net.UDPAddr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToUDP", data, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteToUDP indicates an expected call of WriteToUDP.
func (mr *MockConnectionWriterMockRecorder) WriteToUDP(data, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToUDP", reflect.TypeOf((*MockConnectionWriter)(nil).WriteToUDP), data, addr)
}

// MockConnectionCloser is a mock of ConnectionCloser interface.
type MockConnectionCloser struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionCloserMockRecorder
	isgomock struct{}
}

// MockConnectionCloserMockRecorder is the mock recorder for MockConnectionCloser.
type MockConnectionCloserMockRecorder struct {
	mock *MockConnectionCloser
}

// NewMockConnectionCloser creates a new mock instance.
func NewMockConnectionCloser(ctrl *gomock.Controller) *MockConnectionCloser {
	mock := &MockConnectionCloser{ctrl: ctrl}
	mock.recorder = &MockConnectionCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionCloser) EXPECT() *MockConnectionCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnectionCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnectionCloser)(nil).Close))
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
	isgomock struct{}
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// ReadFromUDP mocks base method.
func (m *MockConnection) ReadFromUDP(data []byte) (int, *net.UDPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFromUDP", data)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*net.UDPAddr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadFromUDP indicates an expected call of ReadFromUDP.
func (mr *MockConnectionMockRecorder) ReadFromUDP(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromUDP", reflect.TypeOf((*MockConnection)(nil).ReadFromUDP), data)
}

// WriteToUDP mocks base method.
func (m *MockConnection) WriteToUDP(data []byte, addr *net.UDPAddr) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteToUDP", data, addr)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteToUDP indicates an expected call of WriteToUDP.
func (mr *MockConnectionMockRecorder) WriteToUDP(data, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteToUDP", reflect.TypeOf((*MockConnection)(nil).WriteToUDP), data, addr)
}
